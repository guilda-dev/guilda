classdef ___NAME___ < component
% モデル  ：___DISCRIPTION___
%         ・状態： <<説明追加>>
%         ・入力： <<説明追加>>
% 親クラス：componentクラス
% 実行方法：obj =　___NAME___(parameter)
% 　引数　：parameter : table型．「<<パラメータ名を追加>>」を列名として定義
% 　出力　：componentクラスのインスタンス

    % 継承されているプロパティ
    % ・x_equilibrium    : 状態の平衡点z
    % ・u_equilibrium    : 定常入力
    % ・y_equilibrium    : 定常出力
    % ・V_equilibrium    : 電圧の定常潮流状態
    % ・I_equilibrium    : 電流の定常潮流状態
    % ・parameter        : モデルのパラメータ定数はこのフィールドに格納してください。
    % ・is_parallel      : 機器が並解列のlogical値（デフォルト値はtrue）
    % ・constraint       : 機器の系統への出力方程式の形式（デフォルトは"current"）
    % ・bus              : 機器が接続している母線クラス 
    % ・local_controllers: 機器に接続しているローカルコントローラのcell配列
    % ・tag              : タグを格納しておく（string型）
    % ・index            : インデックスを格納（doubleのスカラー）
    
    properties
        % 適宜プロパティを追加 
    end
    
    methods
        function obj = ___NAME___(parameter)
            obj.parameter = parameter;
        end        
        
        function dx = get_dx(obj, t, x, V, I, u)
            % 引数：
            % t : 時刻を表すスカラー値。単位は秒（s)
            % x : 状態ベクトル
            % V : 接続母線の電圧のベクトル[Vreal; Vimag]
            % I : 接続母線の電流のベクトル[Ireal; Iimag]
            % u : 入力ベクトル

            % 出力
            %  dx : 状態の時間微分のベクトル

            %%%%%%%%%% 実装 %%%%%%%%%%
            dx      =         %f(x)　に対応するコード
            %%%%%%%%%%%%%%%%%%%%%%%%%
        end

        function [x_st, u_st, y_st] = get_equilibrium(obj, V, I)
            % V：潮流計算によって求められた母線電圧のフェーザ値（ = Vreal + 1j*Vimag ）
            % I：潮流計算によって求められた母線電流のフェーザ値（ = Ireal + 1j*Iimag ）

            % 出力
            % x_st : 機器の状態の平衡点（状態の変数の個数nxと一致するベクトル(nx×1 double)で定義すること）
            % u_st : 機器の定常入力値（入力ポートの個数nuと一致するベクトル(nu×1 double)で定義すること）
            % u_st : 機器の定常出力値（出力ポートの個数nyと一致するベクトル(ny×1 double)で定義すること）

            %%%%%%%%%% 実装 %%%%%%%%%%
            x_st = 
            u_st = 
            y_st = 
            %%%%%%%%%%%%%%%%%%%%%%%%%
        end

        
        %%% 以下のいずれかを定義
        function V = get_V(obj,t,x,V,I,u)
            V = 
        end

        % function I = get_I(obj,t,x,V,I,u)
        % end




        %%% 必須ではないが実装を推奨 %%%
        %{
        function name_tag = naming_state(obj)
            % 状態に変数名を名付けるメソッド
            % 出力はcell配列で返す
            % このメソッドが定義されていない場合は「state1,state2,...」と名付けられる
            %
            % 例）状態変数の名前が「x,v,a」の場合以下のように定義する
            % 
            %    >> name_tag = {'x','v','a'};


            %%%%%%%%%% 実装 %%%%%%%%%%
            name_tag =                     
            %%%%%%%%%%%%%%%%%%%%%%%%%
        end

        function u_name = naming_input(obj)
            % 入力のポート名を名付けるメソッド
            % 出力はcell配列で返す
            % このメソッドが定義されていない場合は「input1,input2,...」と名付けられる
            %
            % 例）入力ポートの名前を「port1,port2」とする場合以下のように定義する
            % 
            %    >> u_name = {'port1','port2'};


            %%%%%%%%%% 実装 %%%%%%%%%%
            u_name =                     
            %%%%%%%%%%%%%%%%%%%%%%%%%
        end

        function y_name = naming_output(obj)
            % 出力のポート名を名付けるメソッド
            % 出力はcell配列で返す
            % このメソッドが定義されていない場合は「output1,output2,...」と名付けられる
            %
            % 例）入力ポートの名前を「port1,port2」とする場合以下のように定義する
            % 
            %    >> y_name = {'port1','port2'};


            %%%%%%%%%% 実装 %%%%%%%%%%
            y_name =                     
            %%%%%%%%%%%%%%%%%%%%%%%%%
        end

        function [A, B, C, D] = get_linear_matrix(obj, x_st, Vst)
            % 近似線形モデルのシステム行列を定義。
            % 定義しない場合は、get_dX_constraintメソッドから数値的に導出される。
            
            % 出力
            %　以下の式に対応する各行列
            % [微分方程式]
            % dx = A*(x-xeq) + B*u + BV*(V-Veq) + BI*(I-Ieq) + R*d
            % [制約条件]
            % 0  = C*(x-xeq) + D*u + DV*(V-Veq) + DI*(I-Ieq)
            % [評価出力]
            % y  = S*(x-xeq)


            %%%%%%%%%% 実装 %%%%%%%%%%
            A  = 
            B  = 
            C  = 
            D  = 
            BV = 
            BI = 
            DV = 
            DI = 
            R  = 
            S  = 
            %%%%%%%%%%%%%%%%%%%%%%%%%

        end
        %}
    end
        
end


