classdef ___NAME___ < controller
% モデル  ：___DISCRIPTION___
% 親クラス：controllerクラス
% 実行方法：obj =　___NAME___(net, y_idx, u_idx, << 定義するクラスの引数に応じて記載 >>)
% 　引数　：・y_idx : double配列。観測元の機器の番号
% 　　　　　・u_idx : double配列。入力先の機器の番号
%　　　　　 ・ << 引数の説明を記載しておくと他の人が助かります！ >>
%
% 　出力　：controllerクラスのインスタンス
%
%  controllerクラスから継承されているプロパティ
%
%   ・network       : 制御器を付加したpower_networkクラス
%   ・parameter     : モデルのパラメータ定数はこのフィールドに格納してください。
%
%   制御器が観測・入力を行う機器の番号リスト <インスタンスを作成する際にユーザが引数で指定した番号>
%   ・index_input   : 制御器が入力を印加する規定の機器の番号リスト
%   ・index_observe : 制御器が状態を観測する規定の機器の番号リスト
%   
%   並列中の機器のリストを格納 <シミュレーション中に機器が系統から解列するようなケースを考える場合に使用>
%   ・connected_index_input   : index_inputで指定した機器のうち系統に接続している機器の番号リスト
%   ・connected_index_observe : index_iobserveで指定した機器のうち系統に接続している機器の番号リスト

    properties(SetAccess=protected) % 
        type = 'local';             % 制御器が'local'か'global'かを入力
        port_input   = 'all';       % 制御器が機器に印加する入力名　 : 'all'であれは全てのポートへ入力
        port_observe = 'all';       % 制御器が機器から観測する状態名 : 'all'であれは全ての状態を観測
    end
    
    properties
        % 適宜プロパティを追加 
    end
    
    methods
        function obj = ___NAME___(net, y_idx, u_idx) %引数は適宜変更して良いがy_idx,u_idxは残すこと
            obj@controller(net, u_idx, y_idx);

        end
        
        function nx = get_nx(obj)
            % 状態の個数を定義するメソッド
            % 状態変数の個数が1個の場合
            %   >> nx = 1;


            %%%%%%%%%% 実装 %%%%%%%%%%
            nx = 
            %%%%%%%%%%%%%%%%%%%%%%%%%

        end
        
        function [dx, u] = get_dx_u(obj, t, x, X, V, I, u_global)
            % 引数：
            % t : 時刻を表すスカラー値。単位は秒（s)
            % x : 制御器の状態ベクトル
            % X : 観測対象の機器の状態。型は各機器の状態ベクトルのcell配列。
            % V : 観測対象の機器が接続する母線の電圧。２×[観測対象の母線の個数]のdouble型配列
            % I : 観測対象の機器が接続する母線の電圧。２×[観測対象の母線の個数]のdouble型配列
            % u_global : globalコントローラからの各機器への入力ベクトル

            % 出力：
            % dx : 制御器の状態の時間微分のベクトル
            % u  : 制御器の出力ベクトル（各機器への入力ごとのcell配列として定義）


            %%%%%%%%%% 実装 %%%%%%%%%%

            % 観測対象の機器の状態・入力および母線電圧/電流を取得
                x1 = X{1};
                 :
                xi = X{i};
    
                V1 = V{1};
                 :
                Vi = V{i};
    
                I1 = I{1};
                 :
                Ii = I{i};
    
                u1 = u_global{1};
                 :
                ui = u_global{i};
    
    
            % 状態の微分値と制御入力を定義
                dx =   ; %状態の微分値の配列数は、get_nxメソッドで定義した状態数と一致すること
    
                u1 = 
                 :
                ui = 
    
            % 制御入力は機器ごとのcell配列に変換
                u  = {u1,...,ui}

            %%%%%%%%%%%%%%%%%%%%%%%%%

        end

        function initialize(obj)
            % 本メソッドの主な用途は、観測/入力対象の機器の並解列などのステータスに応じて制御器のパラメータを更新したい場合に、その更新処理を記述しておきます。
            % 何も実行の必要がない場合は、からのメソッドのまま定義してOKです。
            % 主な実行タイミングは以下の通りです。
            %  >> power_networkクラスに追加された際
            %  >> シミュレーションの各タームの開始時

        end


        %%% 必須ではないが実装を推奨 %%%
        %{        
        function [A, BX, BV, BI,  Bu, C, DX, DV, DI, Du] = get_linear_matrix(obj)
            % 近似線形モデルのシステム行列を定義。
            % 定義しない場合は、get_dX_constraintメソッドから数値的に導出される。
            
            % 出力
            %　以下の式に対応する各行列
            %  x : 制御器の状態ベクトル
            %  X : 全ての観測対象の機器の状態を並べた列ベクトル
            %  u : グローバルコントローラから制御器への入力
            %  U : 制御器から対象機器への入力
            % [微分方程式]
            % dx = A*(x-xeq) + BX*(X-Xeq) + BV*(V-Veq) + BI*(I-Ieq) + Bu*(u-ueq)
            % [制約条件]
            % U  = C*(x-xeq) + BX*(X-Xeq) + DV*(V-Veq) + DI*(I-Ieq) + Du*(u-ueq)


            %%%%%%%%%% 実装 %%%%%%%%%%
            A  = 
            BX =
            BV =
            BI =
            Bu =
            C  = 
            DX =
            DV = 
            DI = 
            Du = 
            %%%%%%%%%%%%%%%%%%%%%%%%%

        end
        %}
        
    end
end
