classdef ___NAME___ < controller
% model         : ___DISCRIPTION___
% SuperClass    : controller
% constructor   : obj =　___NAME___(y_idx, u_idx, <<Described according to the arguments of the class to be defined>>)
% varargin      :・y_idx : array of double type. Number of the device to observed.
%                ・u_idx : array of double type. Number of the device to input
%                ・<<It would help others if you included a description of your arguments!>>
% varargout     : Instance of controller class
%
%
%
% Properties inherited from controller class
%
%   > network   : power_network class to which a controller is added
%   > parameter : Parameter constants for the model should be stored in this field
%
% List of numbers of components that the controller observes and inputs 
% number specified by the user as an argument when creating the instance
%   > index_input   : list of numbers of components to which the controller applies input
%   > index_observe : list of numbers of components to which the controller observes the state
%
% List of components in parallel 
% used when considering the case where devices are disassembled from the system during simulation> 
%   > connected_index_input   : Number List of components connected to the grid among the devices specified by index_input
%   > connected_index_observe : Number List of components connected to the grid among the devices specified in index_iobserve
    
    properties(SetAccess=protected) % 
        type = 'local';             % Input whether the controller is 'local' or 'global
        port_input   = 'all';       % Name of input applied to the component by the controller  : 'all' means input to all ports
        port_observe = 'all';       % State name that the controller observes from the component: 'all' means all states are observed
    end

    properties
        % Add properties as appropriate for the model you define 
    end
    
    methods
        function obj = ___NAME___(y_idx, u_idx) %Arguments may be changed freely, but "y_idx" and "u_idx" must be retained.
            obj@controller(u_idx, y_idx);

        end
        
        function nx = get_nx(obj) 
            % Methods to define the number of states
            % ex. When the number of state variables is one
            %   >> nx = 1;


            %%%%%%%%%% define %%%%%%%%%%
            nx = 
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%

        end
        
        function [dx, u] = get_dx_u(obj, t, x, X, V, I, u_global)
            % varargin:
            % t : Scalar value representing time. Unit is seconds (s).
            % x : controller state vector
            % X : State of the device to be observed. The argument type is an array of cells, where each cell is a state vector of the observed device.
            % V : Voltage of bus connected to the device to be observed. 2 x [number of busbars to be observed] double type array
            % I : Current of bus connected to the device to be observed. 2 x [number of busbars to be observed] double type array
            % u_global : Input vector from global controller

            % varargout:
            % dx : Vector of time derivatives of the controller state
            % u  : Output vector of controller (defined as a cell array for each input to each device)


            %%%%%%%%%% define %%%%%%%%%%

            % Acquire status/input and bus-bar voltage/current of component to be observed
                x1 = X{1};
                 :
                xi = X{i};
    
                V1 = V{1};
                 :
                Vi = V{i};
    
                I1 = I{1};
                 :
                Ii = I{i};
    
                u1 = u_global{1};
                 :
                ui = u_global{i};
    
    
            % Define state derivative and control inputs
                dx =   ; % The number of arrays of state differential values must match the number of states defined in the get_nx method
    
                u1 = 
                 :
                ui = 
    
            % Control input converted to per-device cell array
                u  = {u1,...,ui}

            %%%%%%%%%%%%%%%%%%%%%%%%%

        end

        function initialize(obj)
            % The main use of this method is to describe the updating process when you want to update the parameters of the controller according to the status of the parallelism sequence or other status of the equipment to be observed/input.
            % If there is no need to execute anything, it is OK to define the method as it is from.
            % The main execution timing is as follows.
            % >> When added to the power_network class
            % >> At the beginning of each term of the simulation

        end


        %%% Not a required implementation, but recommended %%%
        %{        
        function [A, BX, BV, BI,  Bu, C, DX, DV, DI, Du] = get_linear_matrix(obj)
            % Define the system matrix of the approximate linear model.
            % If not defined, it is derived numerically from the "get_dX_constraint" method.
            
            % varargout
            %　Each matrix corresponding to the following equation
            %  x : controller state vector
            %  X : Column vector of the states of all components to be observed
            %  u : Input from global controller to controller
            %  U : Input from controller to target component
            % [differential equation]
            % dx = A*(x-xeq) + BX*(X-Xeq) + BV*(V-Veq) + BI*(I-Ieq) + Bu*(u-ueq)
            % [output equation]
            % U  = C*(x-xeq) + BX*(X-Xeq) + DV*(V-Veq) + DI*(I-Ieq) + Du*(u-ueq)


            %%%%%%%%%% define %%%%%%%%%%
            A  = 
            BX =
            BV =
            BI =
            Bu =
            C  = 
            DX =
            DV = 
            DI = 
            Du = 
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%

        end
        %}
        
    end
end
